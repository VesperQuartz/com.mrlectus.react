/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as dashboardRouteRouteImport } from './routes/(dashboard)/route'
import { Route as dashboardIndexRouteImport } from './routes/(dashboard)/index'
import { Route as authLoginIndexRouteImport } from './routes/(auth)/login/index'

const dashboardRouteRoute = dashboardRouteRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardIndexRoute = dashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardRouteRoute,
} as any)
const authLoginIndexRoute = authLoginIndexRouteImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof dashboardIndexRoute
  '/login': typeof authLoginIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof dashboardIndexRoute
  '/login': typeof authLoginIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(dashboard)': typeof dashboardRouteRouteWithChildren
  '/(dashboard)/': typeof dashboardIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login'
  id: '__root__' | '/(dashboard)' | '/(dashboard)/' | '/(auth)/login/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  dashboardRouteRoute: typeof dashboardRouteRouteWithChildren
  authLoginIndexRoute: typeof authLoginIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/': {
      id: '/(dashboard)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardIndexRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface dashboardRouteRouteChildren {
  dashboardIndexRoute: typeof dashboardIndexRoute
}

const dashboardRouteRouteChildren: dashboardRouteRouteChildren = {
  dashboardIndexRoute: dashboardIndexRoute,
}

const dashboardRouteRouteWithChildren = dashboardRouteRoute._addFileChildren(
  dashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  dashboardRouteRoute: dashboardRouteRouteWithChildren,
  authLoginIndexRoute: authLoginIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
